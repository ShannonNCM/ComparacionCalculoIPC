#filter(cantidad_actual !=0) %>%
#filter(precio_anterior !=0) %>%
#filter(precio_actual !=0) %>%
#filter(cantidad_anterior-cantidad_actual < 5) %>%
#filter(precio_anterior-precio_actual < 5) %>%
#filter(cantidad_actual-cantidad_anterior < 5) %>%
#filter(precio_actual-precio_anterior < 5) #%>%
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba
bol <- boletas %>%
filter(tp_poll_impute_status %in% c(351821, 351824)) %>%
select(region, codigo_articulo, articulo, cantidad_anterior, cantidad_actual, precio_anterior, precio_actual) %>%
mutate(cod_prod = substr(codigo_articulo, 1, ifelse(nchar(codigo_articulo) > 8, nchar(codigo_articulo) - 2, nchar(codigo_articulo) - 1)), .before = codigo_articulo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) #%>%
#drop_na() #%>%
#filter(cantidad_anterior !=0) %>%
#filter(cantidad_actual !=0) %>%
#filter(precio_anterior !=0) %>%
#filter(precio_actual !=0) %>%
#filter(cantidad_anterior-cantidad_actual < 5) %>%
#filter(precio_anterior-precio_actual < 5) %>%
#filter(cantidad_actual-cantidad_anterior < 5) %>%
#filter(precio_actual-precio_anterior < 5) #%>%
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba
sum(is.na(bol)) #esto es el numero de datos faltantes en las boletas
#unique(bol$cod_prod)
bol %>%
filter(cod_prod == "0611201") #%>%
#filter(cod_prod == "0116104")
#aqui estoy revisando los datos de las boletas que tienen precios extra침os que modifican el indice de los productos
#Aqui tengo las ponderaciones para cada produto por cada region y los indices anteriores
pon_prod <- pondcat("Producto") %>%
rename(cod_prod = grupo_codigo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod))
sum(is.na(bol)) #esto es el numero de datos faltantes en las boletas
#unique(bol$cod_prod)
bol %>%
filter(cod_prod == "0611201") #%>%
#filter(cod_prod == "0116104")
#aqui estoy revisando los datos de las boletas que tienen precios extra침os que modifican el indice de los productos
bol01 <- variacion(bol) #%>%
#drop_na()
bol01 %>%
select(region, cod_prod, codigo_articulo, articulo, var_prod)
#sum(is.na(bol01))
relativo <- bol01 %>%
group_by(region, cod_prod) %>%
summarize(relativo = geometric.mean(var_prod)) %>%
left_join(pon_prod %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_grupo),
by = c("region", "cod_prod")) %>%
select(region, cod_prod, grupo_nombre, relativo, ponderacion_region, indice_grupo)
bol01 <- variacion(bol) #%>%
#drop_na()
bol01 %>%
select(region, cod_prod, codigo_articulo, articulo, var_prod)
#sum(is.na(bol01))
relativo <- bol01 %>%
group_by(region, cod_prod) %>%
summarize(relativo = geometric.mean(var_prod)) %>%
left_join(pon_prod %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_grupo),
by = c("region", "cod_prod")) %>%
select(region, cod_prod, grupo_nombre, relativo, ponderacion_region, indice_grupo)
prom_pon <- relativo %>%
group_by(region, cod_prod, grupo_nombre) %>%
summarize(var_ac = sum(relativo*ponderacion_region),
sum_pon = sum(ponderacion_region)) %>%
mutate(prom_pon = var_ac/sum_pon) %>%
left_join(relativo %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_grupo), by = c("region", "cod_prod", "grupo_nombre"))
relativo <- bol01 %>%
group_by(region, cod_prod) %>%
summarize(relativo = geometric.mean(var_prod)) %>%
left_join(pon_prod %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_grupo),
by = c("region", "cod_prod")) %>%
select(region, cod_prod, grupo_nombre, relativo, ponderacion_region, indice_grupo)
ind_prod <- prom_pon %>%
mutate(ind_prod = indice_grupo*prom_pon) %>%
cod_grupos() %>%
drop_na() #utilice el dropna porque hay datos faltantes en las boletas
#ind_prod
#ind_prod %>%
#  select(region, cod_prod, grupo_nombre, sum_pon, prom_pon, ind_prod) %>%
#  filter(cod_prod == "0111102")
#indover150 <-
ind_prod %>%
select(region, cod_prod, grupo_nombre, var_ac, sum_pon, prom_pon, ponderacion_region, ind_prod) %>%
#filter(ind_prod > 1000) #%>%
#filter(ind_prod > 500) #%>%
filter(ind_prod > 200)
#filter(ind_prod < 80)
#ind_prod01 <- ind_prod %>%
#  select(region, cod_prod, ind_prod)
#se guardan los datos en el workbook
#writeData(indices, "Cuadro1", ind_prod01)
#write.xlsx(indover150, "indicessobre150_012024.xlsx")
ind_gen %>%
select(region, ind_prod_rep) #%>%
#left_join(pondant(bolant,"Divisi칩n") #%>%
#            mutate(grupo_codigo = ifelse(nchar(grupo_codigo) == 1, paste0("0", grupo_codigo), grupo_codigo)) %>%
#            select(region, grupo_codigo, ponderacion_region, indice_grupo),
#          by = c("region", "grupo_codigo")) %>%
#mutate(inc_div = ((ind-indice_grupo)*ponderacion_region)/100)
dbDisconnect(con)
boletas %>%
select(region, codigo_articulo, nt_tipo_nombre, tp_poll_impute_status)
bol <- boletas %>%
filter(tp_poll_impute_status %in% c(351821, 351824)) %>%
select(region, codigo_articulo, articulo, cantidad_anterior, cantidad_actual, precio_anterior, precio_actual) %>%
mutate(cod_prod = substr(codigo_articulo, 1, ifelse(nchar(codigo_articulo) > 8, nchar(codigo_articulo) - 2, nchar(codigo_articulo) - 1)), .before = codigo_articulo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) #%>%
#drop_na() #%>%
#filter(cantidad_anterior !=0) %>%
#filter(cantidad_actual !=0) %>%
#filter(precio_anterior !=0) %>%
#filter(precio_actual !=0) %>%
#filter(cantidad_anterior-cantidad_actual < 5) %>%
#filter(precio_anterior-precio_actual < 5) %>%
#filter(cantidad_actual-cantidad_anterior < 5) %>%
#filter(precio_actual-precio_anterior < 5) #%>%
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba
sum(is.na(bol)) #esto es el numero de datos faltantes en las boletas
#unique(bol$cod_prod)
bol %>%
filter(cod_prod == "0611201") #%>%
#filter(cod_prod == "0116104")
#aqui estoy revisando los datos de las boletas que tienen precios extra침os que modifican el indice de los productos
#Aqui tengo las ponderaciones para cada produto por cada region y los indices anteriores
pon_prod <- pondcat("Producto") %>%
rename(cod_prod = grupo_codigo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod))
bol01 <- variacion(bol) #%>%
#drop_na()
bol01 %>%
select(region, cod_prod, codigo_articulo, articulo, var_prod)
#sum(is.na(bol01))
relativo <- bol01 %>%
group_by(region, cod_prod) %>%
summarize(relativo = geometric.mean(var_prod)) %>%
left_join(pon_prod %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_grupo),
by = c("region", "cod_prod")) %>%
select(region, cod_prod, grupo_nombre, relativo, ponderacion_region, indice_grupo)
prom_pon <- relativo %>%
group_by(region, cod_prod, grupo_nombre) %>%
summarize(var_ac = sum(relativo*ponderacion_region),
sum_pon = sum(ponderacion_region)) %>%
mutate(prom_pon = var_ac/sum_pon) %>%
left_join(relativo %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_grupo), by = c("region", "cod_prod", "grupo_nombre"))
ind_prod <- prom_pon %>%
mutate(ind_prod = indice_grupo*prom_pon) %>%
cod_grupos() %>%
drop_na() #utilice el dropna porque hay datos faltantes en las boletas
#ind_prod
#ind_prod %>%
#  select(region, cod_prod, grupo_nombre, sum_pon, prom_pon, ind_prod) %>%
#  filter(cod_prod == "0111102")
#indover150 <-
ind_prod %>%
select(region, cod_prod, grupo_nombre, var_ac, sum_pon, prom_pon, ponderacion_region, ind_prod) %>%
#filter(ind_prod > 1000) #%>%
#filter(ind_prod > 500) #%>%
filter(ind_prod > 200)
#filter(ind_prod < 80)
#ind_prod01 <- ind_prod %>%
#  select(region, cod_prod, ind_prod)
#se guardan los datos en el workbook
#writeData(indices, "Cuadro1", ind_prod01)
#write.xlsx(indover150, "indicessobre150_012024.xlsx")
#ind_subclase <-
ind_prod %>%
select(region, cod_subclase, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_subclase) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2)
#ind_clase <-
ind_prod %>%
select(region, cod_clase, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_clase) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) #%>%
#filter(grupo_codigo == "0111")
#el "problema" aqui es que el count esta contando todos todos los que se usaron, porque estoy yendo desde la base de datos de los productos, que si coindicen al menos para el arroz, excepto en la region 7 que me salen solo 15 :O
#ind_grupo <-
ind_prod %>%
select(region, cod_grupo, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_grupo) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2)
#ind_div <-
ind_prod %>%
select(region, cod_div, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_div) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) #%>%
#select(region, grupo_codigo, ind)
#ind_grupo <-
ind_prod %>%
select(region, cod_grupo, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_grupo) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2)
#ind_div <-
ind_prod %>%
select(region, cod_div, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_div) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) #%>%
#select(region, grupo_codigo, ind)
#ind_rep_prod <-
ind_prod %>%
group_by(cod_prod, grupo_nombre) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind_prod_rep = sum1/sum2) #%>%
#filter(cod_prod == "0431104")
#ind_rep_subclase <-
ind_prod %>%
group_by(cod_subclase) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind_prod_rep = sum1/sum2)
#ind_rep_clase <-
ind_prod %>%
group_by(cod_clase) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2)
#ind_rep_grupo <-
ind_prod %>%
group_by(cod_grupo) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2)
#ind_rep_div <-
ind_prod %>%
group_by(cod_div) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2)
#ind_gen <-
ind_prod %>%
group_by(region) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) #%>%
#select(region, ind_prod_rep)
#ind_rep <-
ind_prod %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(indrep = sum1/sum2)
bol %>%
filter(cod_prod == "0611201") #%>%
#filter(cod_prod == "0116104")
#aqui estoy revisando los datos de las boletas que tienen precios extra침os que modifican el indice de los productos
ind_prod <- prom_pon %>%
mutate(ind_prod = indice_grupo*prom_pon) %>%
cod_grupos() %>%
drop_na() #utilice el dropna porque hay datos faltantes en las boletas
#ind_prod
#ind_prod %>%
#  select(region, cod_prod, grupo_nombre, sum_pon, prom_pon, ind_prod) %>%
#  filter(cod_prod == "0111102")
#indover150 <-
ind_prod %>%
select(region, cod_prod, grupo_nombre, var_ac, sum_pon, prom_pon, ponderacion_region, ind_prod) %>%
#filter(ind_prod > 1000) #%>%
#filter(ind_prod > 500) #%>%
filter(ind_prod > 150)
#filter(ind_prod < 80)
#ind_prod01 <- ind_prod %>%
#  select(region, cod_prod, ind_prod)
#se guardan los datos en el workbook
#writeData(indices, "Cuadro1", ind_prod01)
#write.xlsx(indover150, "indicessobre150_012024.xlsx")
bol <- boletas %>%
filter(tp_poll_impute_status %in% c(351821, 351824)) %>%
select(region, codigo_articulo, articulo, cantidad_anterior, cantidad_actual, precio_anterior, precio_actual) %>%
mutate(cod_prod = substr(codigo_articulo, 1, ifelse(nchar(codigo_articulo) > 8, nchar(codigo_articulo) - 2, nchar(codigo_articulo) - 1)), .before = codigo_articulo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
filter(cantidad_anterior !=0) %>%
filter(precio_anterior !=0)
#%>%
#drop_na() #%>%
#filter(cantidad_anterior !=0) %>%
#filter(cantidad_actual !=0) %>%
#filter(precio_anterior !=0) %>%
#filter(precio_actual !=0) %>%
#filter(cantidad_anterior-cantidad_actual < 5) %>%
#filter(precio_anterior-precio_actual < 5) %>%
#filter(cantidad_actual-cantidad_anterior < 5) %>%
#filter(precio_actual-precio_anterior < 5) #%>%
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba
bol %>%
filter(cantidad_actual == 0)
bol %>%
filter(precio_actual == 0)
bol <- boletas %>%
filter(tp_poll_impute_status %in% c(351821, 351824)) %>%
select(region, codigo_articulo, articulo, cantidad_anterior, cantidad_actual, precio_anterior, precio_actual) %>%
mutate(cod_prod = substr(codigo_articulo, 1, ifelse(nchar(codigo_articulo) > 8, nchar(codigo_articulo) - 2, nchar(codigo_articulo) - 1)), .before = codigo_articulo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) #%>%
#filter(cantidad_anterior !=0) %>%
#filter(precio_anterior !=0)
#%>%
#drop_na() #%>%
#filter(cantidad_anterior !=0) %>%
#filter(cantidad_actual !=0) %>%
#filter(precio_anterior !=0) %>%
#filter(precio_actual !=0) %>%
#filter(cantidad_anterior-cantidad_actual < 5) %>%
#filter(precio_anterior-precio_actual < 5) %>%
#filter(cantidad_actual-cantidad_anterior < 5) %>%
#filter(precio_actual-precio_anterior < 5) #%>%
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba
bol %>%
filter(precio_actual == 0)
bol %>%
filter(cantidad_actual == 0)
bol <- boletas %>%
filter(tp_poll_impute_status %in% c(351821, 351824)) %>%
select(region, codigo_articulo, articulo, cantidad_anterior, cantidad_actual, precio_anterior, precio_actual) %>%
mutate(cod_prod = substr(codigo_articulo, 1, ifelse(nchar(codigo_articulo) > 8, nchar(codigo_articulo) - 2, nchar(codigo_articulo) - 1)), .before = codigo_articulo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
filter(cantidad_anterior !=0) %>%
filter(precio_anterior !=0)
#%>%
#drop_na() #%>%
#filter(cantidad_anterior !=0) %>%
#filter(cantidad_actual !=0) %>%
#filter(precio_anterior !=0) %>%
#filter(precio_actual !=0) %>%
#filter(cantidad_anterior-cantidad_actual < 5) %>%
#filter(precio_anterior-precio_actual < 5) %>%
#filter(cantidad_actual-cantidad_anterior < 5) %>%
#filter(precio_actual-precio_anterior < 5) #%>%
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba
sum(is.na(bol)) #esto es el numero de datos faltantes en las boletas
#unique(bol$cod_prod)
bol <- boletas %>%
filter(tp_poll_impute_status %in% c(351821, 351824)) %>%
select(region, codigo_articulo, articulo, cantidad_anterior, cantidad_actual, precio_anterior, precio_actual) %>%
mutate(cod_prod = substr(codigo_articulo, 1, ifelse(nchar(codigo_articulo) > 8, nchar(codigo_articulo) - 2, nchar(codigo_articulo) - 1)), .before = codigo_articulo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
filter(cantidad_anterior !=0) %>%
filter(precio_anterior !=0)
#%>%
#drop_na() #%>%
#filter(cantidad_anterior-cantidad_actual < 5) %>%
#filter(precio_anterior-precio_actual < 5) %>%
#filter(cantidad_actual-cantidad_anterior < 5) %>%
#filter(precio_actual-precio_anterior < 5) #%>%
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba
bol <- boletas %>%
filter(tp_poll_impute_status %in% c(351821, 351824)) %>%
select(region, codigo_articulo, articulo, cantidad_anterior, cantidad_actual, precio_anterior, precio_actual) %>%
mutate(cod_prod = substr(codigo_articulo, 1, ifelse(nchar(codigo_articulo) > 8, nchar(codigo_articulo) - 2, nchar(codigo_articulo) - 1)), .before = codigo_articulo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
filter(cantidad_anterior !=0) %>%
filter(precio_anterior !=0)
#%>%
#drop_na() #%>%
#filter(cantidad_anterior-cantidad_actual < 5) %>%
#filter(precio_anterior-precio_actual < 5) %>%
#filter(cantidad_actual-cantidad_anterior < 5) %>%
#filter(precio_actual-precio_anterior < 5) #%>%
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba
sum(is.na(bol)) #esto es el numero de datos faltantes en las boletas
#unique(bol$cod_prod)
bol01 <- variacion(bol) #%>%
#drop_na()
bol01 %>%
select(region, cod_prod, codigo_articulo, articulo, var_prod)
#sum(is.na(bol01))
prom_pon <- relativo %>%
group_by(region, cod_prod, grupo_nombre) %>%
summarize(var_ac = sum(relativo*ponderacion_region),
sum_pon = sum(ponderacion_region)) %>%
mutate(prom_pon = var_ac/sum_pon) %>%
left_join(relativo %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_grupo), by = c("region", "cod_prod", "grupo_nombre"))
#ind_subclase <-
ind_prod %>%
select(region, cod_subclase, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_subclase) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2)
#ind_clase <-
ind_prod %>%
select(region, cod_clase, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_clase) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) #%>%
#filter(grupo_codigo == "0111")
#el "problema" aqui es que el count esta contando todos todos los que se usaron, porque estoy yendo desde la base de datos de los productos, que si coindicen al menos para el arroz, excepto en la region 7 que me salen solo 15 :O
#ind_grupo <-
ind_prod %>%
select(region, cod_grupo, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_grupo) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2)
#ind_rep_prod <-
ind_prod %>%
group_by(cod_prod, grupo_nombre) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind_prod_rep = sum1/sum2) #%>%
#filter(cod_prod == "0431104")
#ind_rep_clase <-
ind_prod %>%
group_by(cod_clase) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2)
#ind_rep_grupo <-
ind_prod %>%
group_by(cod_grupo) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2)
#ind_rep_div <-
ind_prod %>%
group_by(cod_div) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2)
#ind_gen <-
ind_prod %>%
group_by(region) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) #%>%
#select(region, ind_prod_rep)
#ind_rep <-
ind_prod %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(indrep = sum1/sum2)
ind_prod %>%
select(region, cod_prod, grupo_nombre, ponderacion_region, ind_prod) %>%
left_join(pondant(bolant,"Producto") %>%
rename(cod_prod = grupo_codigo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
select(region, cod_prod, grupo_nombre, indice_grupo),
by = c("region", "cod_prod", "grupo_nombre")) %>%
mutate(inc_prod = ((ind_prod-indice_grupo)*ponderacion_region)/100)
ind_div %>%
select(region, grupo_codigo, ind) %>%
left_join(pondant(bolant,"Divisi칩n") %>%
mutate(grupo_codigo = ifelse(nchar(grupo_codigo) == 1, paste0("0", grupo_codigo), grupo_codigo)) %>%
select(region, grupo_codigo, ponderacion_region, indice_grupo),
by = c("region", "grupo_codigo")) %>%
mutate(inc_div = ((ind-indice_grupo)*ponderacion_region)/100)
ind_gen %>%
select(region, ind_prod_rep) #%>%
#left_join(pondant(bolant,"Divisi칩n") #%>%
#            mutate(grupo_codigo = ifelse(nchar(grupo_codigo) == 1, paste0("0", grupo_codigo), grupo_codigo)) %>%
#            select(region, grupo_codigo, ponderacion_region, indice_grupo),
#          by = c("region", "grupo_codigo")) %>%
#mutate(inc_div = ((ind-indice_grupo)*ponderacion_region)/100)
#indices <- createWorkbook()
#for (i in 1:13) {
#  nombres_cuad <- paste("Cuadro",i,sep = "")
#  addWorksheet(indices, nombres_cuad)}
#se guardan los datos en el workbook
#writeData(indices, "Cuadro1", ind_prod)
#writeData(indices, "Cuadro2", ind_subclase)
#writeData(indices, "Cuadro3", ind_clase)
#writeData(indices, "Cuadro4", ind_grupo)
#writeData(indices, "Cuadro5", ind_div)
#writeData(indices, "Cuadro6", ind_rep_prod)
#writeData(indices, "Cuadro7", ind_rep_subclase)
#writeData(indices, "Cuadro8", ind_rep_clase)
#writeData(indices, "Cuadro9", ind_rep_grupo)
#writeData(indices, "Cuadro10", ind_rep_div)
#writeData(indices, "Cuadro11", ind_gen)
#writeData(indices, "Cuadro12", ind_rep)
#saveWorkbook(indices, "prueba01.xlsx", overwrite = TRUE)
