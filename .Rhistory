sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) %>%
drop_na() %>%
select(region, grupo_codigo, ind)
ind_rep_prod <- ind_prod %>%
group_by(cod_prod, grupo_nombre) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
select(cod_prod, grupo_nombre, ind_prod_rep)
ind_rep_subclase <- ind_prod %>%
group_by(cod_subclase) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_subclase, ind_prod_rep)
ind_rep_clase <- ind_prod %>%
group_by(cod_clase) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_clase, ind_prod_rep)
ind_rep_grupo <- ind_prod %>%
group_by(cod_grupo) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_grupo, ind_prod_rep)
ind_rep_div <- ind_prod %>%
group_by(cod_div) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_div, ind_prod_rep)
ind_gen <- ind_prod %>%
group_by(region) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
select(region, ind_prod_rep)
ind_rep <- ind_prod %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(indrep = sum1/sum2)
incid_prod <- ind_prod %>%
select(region, cod_prod, grupo_nombre, ponderacion_region, ind_prod) %>%
left_join(pondcat("Producto") %>%
rename(cod_prod = grupo_codigo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
select(region, cod_prod, grupo_nombre, indice_anterior),
by = c("region", "cod_prod", "grupo_nombre")) %>%
mutate(inc_prod = ((ind_prod-indice_anterior)*ponderacion_region)/indice_anterior) %>%
select(region, cod_prod, grupo_nombre, inc_prod)
incid_div <- ind_div %>%
select(region, grupo_codigo, ind) %>%
left_join(pondcat("División") %>%
mutate(grupo_codigo = ifelse(nchar(grupo_codigo) == 1, paste0("0", grupo_codigo), grupo_codigo)) %>%
select(region, grupo_codigo, ponderacion_region, indice_anterior),
by = c("region", "grupo_codigo")) %>%
mutate(inc_div = ((ind-indice_anterior)*ponderacion_region)/indice_anterior) %>%
select(region, grupo_codigo, inc_div) %>%
drop_na()
ind_reg_ant <- pon_prod %>%
filter(region != 0) %>%
group_by(region) %>%
summarize(sum1 = sum(ponderacion_region*indice_anterior),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_reg_ant = sum1/sum2) %>%
select(region, ind_reg_ant)
incid_reg <- ind_gen %>%
select(region, ind_prod_rep) %>%
left_join(participacion) %>%
left_join(ind_reg_ant) %>%
mutate(inc_prod = ((ind_prod_rep-ind_reg_ant)*participacion)/ind_reg_ant) %>%
select(region, inc_prod)
#aca va la parte donde se obtienen los productos que no se cotizaron en el mes
prod_faltantes <- pon_prod %>%
filter(region == 0) %>%
anti_join(ind_prod, by = "cod_prod") %>%
select(cod_prod, grupo_nombre)
exportarexcel("indiceprelim_022024.xlsx")
bol <- boletas %>%
#filter(tp_poll_impute_status %in% c(351821, 351824)) %>% #filtro de estado de imputacion
#filter(detail_tp_poll_status %in% c(351634, 351635)) %>% #filtro de estado de la boleta
select(region, codigo_articulo, articulo, cantidad_anterior, cantidad_actual, precio_anterior, precio_actual, nt_tipo) %>%
mutate(cod_prod = substr(codigo_articulo, 1, ifelse(nchar(codigo_articulo) > 8, nchar(codigo_articulo) - 2, nchar(codigo_articulo) - 1)), .before = codigo_articulo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
mutate(cantidad_anterior = ifelse(cantidad_anterior == 0 | is.na(cantidad_anterior), cantidad_actual, cantidad_anterior)) %>%
mutate(precio_anterior = ifelse(precio_anterior == 0 | is.na(precio_anterior), precio_actual, precio_anterior))
#estas ultimas 2 condicionales son en caso de que no aparezca un precio/cantidad o el precio/cantidad que se reporta tenga valor 0
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba del calculo
#sum(is.na(bol)) #esto es el numero de datos faltantes en las boletas
#unique(bol$cod_prod)
#sum(is.na(boletas$cantidad_actual))
#which(is.na(bol$cantidad_actual))
#bol %>%
#filter(cod_prod == "1312002") #%>%
#filter(cod_prod == "0116104")
#aqui estoy revisando los datos de las boletas que tienen precios extraños que modifican el indice de los productos
#Aqui tengo las ponderaciones para cada produto por cada region y los indices anteriores
pon_prod <- pondcat("Producto") %>%
rename(cod_prod = grupo_codigo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod))
bol01 <- variacion(bol) %>%
mutate(var_prod = ifelse(nt_tipo %in% c(351761,351762), 1, var_prod)) %>%
select(region, cod_prod, codigo_articulo, articulo, var_prod)
#drop_na()
#sum(is.na(bol01))
relativo <- bol01 %>%
group_by(region, cod_prod) %>%
summarize(relativo = geometric.mean(var_prod)) %>%
left_join(pon_prod %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_anterior),
by = c("region", "cod_prod")) %>%
select(region, cod_prod, grupo_nombre, relativo, ponderacion_region, indice_anterior)
prom_pon <- relativo %>%
group_by(region, cod_prod, grupo_nombre) %>%
summarize(var_ac = sum(relativo*ponderacion_region),
sum_pon = sum(ponderacion_region)) %>%
mutate(prom_pon = var_ac/sum_pon) %>%
left_join(relativo %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_anterior), by = c("region", "cod_prod", "grupo_nombre"))
ind_prod <- prom_pon %>%
mutate(ind_prod = indice_anterior*prom_pon) %>%
cod_grupos() %>%
drop_na() #utilice el dropna porque hay datos faltantes en las boletas
#ind_prod
#ind_prod %>%
#  select(region, cod_prod, grupo_nombre, sum_pon, prom_pon, ind_prod) %>%
#  filter(cod_prod == "0111102")
#indover150 <-
ind_prod %>%
select(region, cod_prod, grupo_nombre, var_ac, sum_pon, prom_pon, ponderacion_region, ind_prod) %>%
#filter(ind_prod > 1000) #%>%
#filter(ind_prod > 500) #%>%
#filter(ind_prod > 110)
filter(ind_prod < 80)
ind_prod01 <- ind_prod %>%
select(region, cod_prod, ind_prod)
#se guardan los datos en el workbook
#writeData(indices, "Cuadro1", ind_prod01)
#write.xlsx(indover150, "indicessobre150_012024.xlsx")
#esta parte se uso porque en enero no aparecian todos los productos
#ind_prod <- ind_prod %>%
#  select(region, cod_div, cod_grupo, cod_clase, cod_subclase, cod_prod, grupo_nombre, ind_prod) %>%
#  full_join(pon_prod) %>%
#  mutate(ind_prod = ifelse(is.na(ind_prod), indice_anterior, ind_prod)) %>%
#  filter(region != 0)
#ind_prod01 <- ind_prod %>%
#  select(region, cod_prod, ind_prod)
ind_subclase <- ind_prod %>%
select(region, cod_subclase, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_subclase) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) %>%
drop_na() %>%
select(region, grupo_codigo, ind)
ind_clase <- ind_prod %>%
select(region, cod_clase, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_clase) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) %>%
drop_na() %>%
select(region, grupo_codigo, ind)
ind_grupo <- ind_prod %>%
select(region, cod_grupo, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_grupo) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) %>%
drop_na() %>%
select(region, grupo_codigo, ind)
ind_div <- ind_prod %>%
select(region, cod_div, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_div) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) %>%
drop_na() %>%
select(region, grupo_codigo, ind)
ind_rep_prod <- ind_prod %>%
group_by(cod_prod, grupo_nombre) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
select(cod_prod, grupo_nombre, ind_prod_rep)
ind_rep_subclase <- ind_prod %>%
group_by(cod_subclase) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_subclase, ind_prod_rep)
ind_rep_clase <- ind_prod %>%
group_by(cod_clase) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_clase, ind_prod_rep)
ind_rep_grupo <- ind_prod %>%
group_by(cod_grupo) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_grupo, ind_prod_rep)
ind_rep_div <- ind_prod %>%
group_by(cod_div) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_div, ind_prod_rep)
ind_gen <- ind_prod %>%
group_by(region) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
select(region, ind_prod_rep)
ind_rep <- ind_prod %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(indrep = sum1/sum2)
incid_prod <- ind_prod %>%
select(region, cod_prod, grupo_nombre, ponderacion_region, ind_prod) %>%
left_join(pondcat("Producto") %>%
rename(cod_prod = grupo_codigo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
select(region, cod_prod, grupo_nombre, indice_anterior),
by = c("region", "cod_prod", "grupo_nombre")) %>%
mutate(inc_prod = ((ind_prod-indice_anterior)*ponderacion_region)/indice_anterior) %>%
select(region, cod_prod, grupo_nombre, inc_prod)
incid_div <- ind_div %>%
select(region, grupo_codigo, ind) %>%
left_join(pondcat("División") %>%
mutate(grupo_codigo = ifelse(nchar(grupo_codigo) == 1, paste0("0", grupo_codigo), grupo_codigo)) %>%
select(region, grupo_codigo, ponderacion_region, indice_anterior),
by = c("region", "grupo_codigo")) %>%
mutate(inc_div = ((ind-indice_anterior)*ponderacion_region)/indice_anterior) %>%
select(region, grupo_codigo, inc_div) %>%
drop_na()
ind_reg_ant <- pon_prod %>%
filter(region != 0) %>%
group_by(region) %>%
summarize(sum1 = sum(ponderacion_region*indice_anterior),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_reg_ant = sum1/sum2) %>%
select(region, ind_reg_ant)
incid_reg <- ind_gen %>%
select(region, ind_prod_rep) %>%
left_join(participacion) %>%
left_join(ind_reg_ant) %>%
mutate(inc_prod = ((ind_prod_rep-ind_reg_ant)*participacion)/ind_reg_ant) %>%
select(region, inc_prod)
#aca va la parte donde se obtienen los productos que no se cotizaron en el mes
prod_faltantes <- pon_prod %>%
filter(region == 0) %>%
anti_join(ind_prod, by = "cod_prod") %>%
select(cod_prod, grupo_nombre)
exportarexcel("indiceprelim_022024.xlsx")
library("readxl")
library("tidyverse")
require("tidyverse")
library("writexl")
library("tibble")
library("openxlsx")
library("DBI")
library("odbc")
library("RSQLite")
library("psych")
library("pracma")
library("bit64")
source("funciones_ipc.R")
server <- 'ipcprod.database.windows.net'
user <- 'ipcreader'
pas <- '1pc/*2023'
database <- 'db-indices'
#server <- 'inegt-ipc.database.windows.net'
#user <- 'ipcuser_exec'
#pas <- 'In3/*ipc2023'
#database <- 'db-indices'
#crea un string completo para conectarse a la base de datos
conn_str <- paste0("Driver={ODBC Driver 17 for SQL Server};",
"Server=", server, ";",
"Database=", database, ";",
"Uid=", user, ";",
"Pwd=", pas, ";"
)
con <- dbConnect(odbc::odbc(), .connection_string=conn_str)
#un mini df que tiene la participacion de las regiones
participacion <- data.frame(region = c(1,2,3,4,5,6,7,8),
participacion = c(13.472203,12.046949,12.486967,12.483411,12.674423,12.415842,12.190962,12.229243)) %>%
mutate(region = as.integer64(region))
dbDisconnect(con)
bol <- boletas %>%
#filter(tp_poll_impute_status %in% c(351821, 351824)) %>% #filtro de estado de imputacion
#filter(detail_tp_poll_status %in% c(351634, 351635)) %>% #filtro de estado de la boleta
select(region, codigo_articulo, articulo, cantidad_anterior, cantidad_actual, precio_anterior, precio_actual, nt_tipo) %>%
mutate(cod_prod = substr(codigo_articulo, 1, ifelse(nchar(codigo_articulo) > 8, nchar(codigo_articulo) - 2, nchar(codigo_articulo) - 1)), .before = codigo_articulo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
mutate(cantidad_anterior = ifelse(cantidad_anterior == 0 | is.na(cantidad_anterior), cantidad_actual, cantidad_anterior)) %>%
mutate(precio_anterior = ifelse(precio_anterior == 0 | is.na(precio_anterior), precio_actual, precio_anterior))
#estas ultimas 2 condicionales son en caso de que no aparezca un precio/cantidad o el precio/cantidad que se reporta tenga valor 0
#mutate(cantidad_actual = cantidad_anterior) %>%
#mutate(precio_actual = precio_anterior) # estas dos ultimas filas no irian en la de verdad esto es solo para la prueba del calculo
#sum(is.na(bol)) #esto es el numero de datos faltantes en las boletas
#unique(bol$cod_prod)
#sum(is.na(boletas$cantidad_actual))
#which(is.na(bol$cantidad_actual))
#bol %>%
#filter(cod_prod == "1312002") #%>%
#filter(cod_prod == "0116104")
#aqui estoy revisando los datos de las boletas que tienen precios extraños que modifican el indice de los productos
#Aqui tengo las ponderaciones para cada produto por cada region y los indices anteriores
pon_prod <- pondcat("Producto") %>%
rename(cod_prod = grupo_codigo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod))
bol01 <- variacion(bol) %>%
mutate(var_prod = ifelse(nt_tipo %in% c(351761,351762), 1, var_prod)) %>%
select(region, cod_prod, codigo_articulo, articulo, var_prod)
#drop_na()
#sum(is.na(bol01))
relativo <- bol01 %>%
group_by(region, cod_prod) %>%
summarize(relativo = geometric.mean(var_prod)) %>%
left_join(pon_prod %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_anterior),
by = c("region", "cod_prod")) %>%
select(region, cod_prod, grupo_nombre, relativo, ponderacion_region, indice_anterior)
prom_pon <- relativo %>%
group_by(region, cod_prod, grupo_nombre) %>%
summarize(var_ac = sum(relativo*ponderacion_region),
sum_pon = sum(ponderacion_region)) %>%
mutate(prom_pon = var_ac/sum_pon) %>%
left_join(relativo %>% select(region, cod_prod, grupo_nombre, ponderacion_region, indice_anterior), by = c("region", "cod_prod", "grupo_nombre"))
ind_prod <- prom_pon %>%
mutate(ind_prod = indice_anterior*prom_pon) %>%
cod_grupos() %>%
drop_na() #utilice el dropna porque hay datos faltantes en las boletas
#ind_prod
#ind_prod %>%
#  select(region, cod_prod, grupo_nombre, sum_pon, prom_pon, ind_prod) %>%
#  filter(cod_prod == "0111102")
#indover150 <-
ind_prod %>%
select(region, cod_prod, grupo_nombre, var_ac, sum_pon, prom_pon, ponderacion_region, ind_prod) %>%
#filter(ind_prod > 1000) #%>%
#filter(ind_prod > 500) #%>%
#filter(ind_prod > 110)
filter(ind_prod < 80)
ind_prod01 <- ind_prod %>%
select(region, cod_prod, ind_prod)
#se guardan los datos en el workbook
#writeData(indices, "Cuadro1", ind_prod01)
#write.xlsx(indover150, "indicessobre150_012024.xlsx")
#esta parte se uso porque en enero no aparecian todos los productos
#ind_prod <- ind_prod %>%
#  select(region, cod_div, cod_grupo, cod_clase, cod_subclase, cod_prod, grupo_nombre, ind_prod) %>%
#  full_join(pon_prod) %>%
#  mutate(ind_prod = ifelse(is.na(ind_prod), indice_anterior, ind_prod)) %>%
#  filter(region != 0)
#ind_prod01 <- ind_prod %>%
#  select(region, cod_prod, ind_prod)
ind_subclase <- ind_prod %>%
select(region, cod_subclase, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_subclase) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) %>%
drop_na() %>%
select(region, grupo_codigo, ind)
ind_clase <- ind_prod %>%
select(region, cod_clase, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_clase) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) %>%
drop_na() %>%
select(region, grupo_codigo, ind)
ind_grupo <- ind_prod %>%
select(region, cod_grupo, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_grupo) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) %>%
drop_na() %>%
select(region, grupo_codigo, ind)
ind_div <- ind_prod %>%
select(region, cod_div, grupo_nombre, ponderacion_region, ind_prod) %>%
rename(grupo_codigo = cod_div) %>%
group_by(region, grupo_codigo) %>%
summarize(sum1 = sum(ind_prod*ponderacion_region),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind = sum1/sum2) %>%
drop_na() %>%
select(region, grupo_codigo, ind)
ind_rep_prod <- ind_prod %>%
group_by(cod_prod, grupo_nombre) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
select(cod_prod, grupo_nombre, ind_prod_rep)
ind_rep_subclase <- ind_prod %>%
group_by(cod_subclase) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region),
count = n()) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_subclase, ind_prod_rep)
ind_rep_clase <- ind_prod %>%
group_by(cod_clase) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_clase, ind_prod_rep)
ind_rep_grupo <- ind_prod %>%
group_by(cod_grupo) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_grupo, ind_prod_rep)
ind_rep_div <- ind_prod %>%
group_by(cod_div) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
drop_na() %>%
select(cod_div, ind_prod_rep)
ind_gen <- ind_prod %>%
group_by(region) %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_prod_rep = sum1/sum2) %>%
select(region, ind_prod_rep)
ind_rep <- ind_prod %>%
summarize(sum1 = sum(ponderacion_region*ind_prod),
sum2 = sum(ponderacion_region)) %>%
mutate(indrep = sum1/sum2)
incid_prod <- ind_prod %>%
select(region, cod_prod, grupo_nombre, ponderacion_region, ind_prod) %>%
left_join(pondcat("Producto") %>%
rename(cod_prod = grupo_codigo) %>%
mutate(cod_prod = ifelse(nchar(cod_prod) == 6, paste0("0", cod_prod), cod_prod)) %>%
select(region, cod_prod, grupo_nombre, indice_anterior),
by = c("region", "cod_prod", "grupo_nombre")) %>%
mutate(inc_prod = ((ind_prod-indice_anterior)*ponderacion_region)/indice_anterior) %>%
select(region, cod_prod, grupo_nombre, inc_prod)
incid_div <- ind_div %>%
select(region, grupo_codigo, ind) %>%
left_join(pondcat("División") %>%
mutate(grupo_codigo = ifelse(nchar(grupo_codigo) == 1, paste0("0", grupo_codigo), grupo_codigo)) %>%
select(region, grupo_codigo, ponderacion_region, indice_anterior),
by = c("region", "grupo_codigo")) %>%
mutate(inc_div = ((ind-indice_anterior)*ponderacion_region)/indice_anterior) %>%
select(region, grupo_codigo, inc_div) %>%
drop_na()
ind_reg_ant <- pon_prod %>%
filter(region != 0) %>%
group_by(region) %>%
summarize(sum1 = sum(ponderacion_region*indice_anterior),
sum2 = sum(ponderacion_region)) %>%
mutate(ind_reg_ant = sum1/sum2) %>%
select(region, ind_reg_ant)
incid_reg <- ind_gen %>%
select(region, ind_prod_rep) %>%
left_join(participacion) %>%
left_join(ind_reg_ant) %>%
mutate(inc_prod = ((ind_prod_rep-ind_reg_ant)*participacion)/ind_reg_ant) %>%
select(region, inc_prod)
#aca va la parte donde se obtienen los productos que no se cotizaron en el mes
prod_faltantes <- pon_prod %>%
filter(region == 0) %>%
anti_join(ind_prod, by = "cod_prod") %>%
select(cod_prod, grupo_nombre)
exportarexcel("indiceprelim_022024.xlsx")
View(ind_rep)
View(ind_rep)
ind_rep
View(ponderaciones)
View(boletas)
View(boletas)
View(ponderaciones)
View(ponderaciones)
